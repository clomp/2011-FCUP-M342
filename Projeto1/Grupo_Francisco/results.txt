Projeto #1 de Álgebra Computacional
-----------------------------------
Data:   26 Outubro 2011
Grupo:  Francisco Mota
Assinatura:



A classe "inteiro" está definida em inteiro.h, e implementada em
inteiro.cpp. O ficheiro inteiro_test.cpp é um conjunto de testes
para a classe. Os ficheiros factorial.cpp e divisor.cpp são as
soluções para os problemas adicionais, com os resultados anotados
em baixo.

100!  = 9332621544394415268169923885626670049071596826438162146859296389521759999322991560894146397615651828625369792082722375825118521091686400000000000000000000000000

1000! = 402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Factors of 10000000001:
    101
    3541
    27961

#ifndef INTEIRO_H
#define INTEIRO_H

#include <string>
#include <vector>
using namespace std;

class inteiro {
    bool negativo;
    vector<unsigned int> coeficientes;

    inteiro shift(int);
    inteiro slice(int, int);
    pair<inteiro, inteiro> divmod(inteiro);

public:
    inteiro();
    inteiro( int n );
    inteiro( bool, vector<unsigned int> );
    inteiro( string );

    bool operator < ( inteiro );
    bool operator > ( inteiro );
    bool operator <= ( inteiro );
    bool operator >= ( inteiro );
    bool operator == ( inteiro );
    bool operator != ( inteiro );
    inteiro operator + ( inteiro );
    inteiro operator - ( );
    inteiro operator - ( inteiro );
    inteiro operator * ( inteiro );
    inteiro operator / ( inteiro );
    inteiro operator % ( inteiro );
    string ConvertToString( );
    inteiro ConvertToInteiro( string );
};

#endif

#include <cassert>
#include <cstdlib>
#include <utility>

#include "inteiro.h"

#define BASE 1000000000
#define BASELEN 9

// Funcoes auxiliares (Christian Lomp)

#include <iostream>
#include <vector>
#include <string>
#include <sstream>
using namespace std;
string ConvertVectorToString(vector<unsigned int> v)
{
	int n=v.size();
	ostringstream vector_string;
	for(int i=n-1; i>=0;i--) {
        unsigned int z=v[i];
        if(i<n-1) {
            unsigned int s=BASE/10;
            while(z < s) {
                vector_string << "0";
                s=s/10;
            }
        }
		vector_string << z;
    }
	return vector_string.str();
}

vector<unsigned int> ConvertStringToVector(string s)
{
	vector<unsigned int> v;
    int n=s.length();
	int q=n/BASELEN;
	int r=n%BASELEN;
	string sub;
    for(int i=q-1;i>=0;i--) {
		sub=s.substr(r+i*BASELEN,BASELEN);
		v.push_back(atoi(sub.c_str()));
	}
	if(r>0) {
		sub=s.substr(0,r);
		v.push_back(atoi(sub.c_str()));
	}
    return v;
}


// Construtores
inteiro::inteiro() {
    negativo = false;
}

inteiro::inteiro(int n) {
    negativo = n < 0;
    if (n <  0) n = -n;
    if (n == 0) return;
    if (n >= BASE) {
        coeficientes.push_back(n % BASE);
        coeficientes.push_back(n / BASE);
    } else {
        coeficientes.push_back(n);
    }
}

inteiro::inteiro(bool sinal, vector<unsigned int> coef) {
    negativo = sinal;
    coeficientes = coef;
    // trim any excessive zeros.
    while (coeficientes.size() && !coeficientes[coeficientes.size()-1]) {
        coeficientes.pop_back();
    }
    // if we are zero, we aren't negative.
    if (!coeficientes.size())
        negativo = false;
}

inteiro::inteiro(string str) {
    negativo = str[0] == '-';
    if (negativo)
        str = str.substr(1);
    coeficientes = ConvertStringToVector(str);
    // trim any excessive zeros.
    while (coeficientes.size() && !coeficientes[coeficientes.size()-1]) {
        coeficientes.pop_back();
    }
    // if we are zero, we aren't negative.
    if (!coeficientes.size())
        negativo = false;
}

// Comparacao

bool inteiro::operator == (inteiro b) {
    return negativo == b.negativo && coeficientes == b.coeficientes;
}

bool inteiro::operator != (inteiro b) {
    return !(*this == b);
}

bool inteiro::operator < (inteiro b) {
    if (negativo && !b.negativo)
        return true;
    if (!negativo && b.negativo)
        return false;
    if (negativo && b.negativo)
        return -b < -*this;
    if (b.coeficientes.size() > coeficientes.size())
        return true;
    if (b.coeficientes.size() < coeficientes.size())
        return false;
    for (int i = coeficientes.size()-1; i >= 0; i--) {
        if (b.coeficientes[i] > coeficientes[i])
            return true;
        if (b.coeficientes[i] < coeficientes[i])
            return false;
    }
    return false;
}

bool inteiro::operator > (inteiro b) {
    return b < *this;
}

bool inteiro::operator <= (inteiro b) {
    return *this == b || *this < b;
}

bool inteiro::operator >= (inteiro b) {
    return *this == b || b < *this;
}

// Operadores.

inteiro inteiro::operator - () {
    return inteiro(!negativo, coeficientes);
}

inteiro inteiro::operator + (inteiro b) {
    if (!negativo && b.negativo)
        return *this - (-b);
    if (negativo && !b.negativo)
        return b - (-*this);
    vector<unsigned int> coefs;
    unsigned long long carry = 0;
    unsigned int size = max(coeficientes.size(), b.coeficientes.size());
    for (unsigned int i = 0; i < size; i++) {
        unsigned long long result = carry;
        if (i < coeficientes.size())
            result += (unsigned long long)coeficientes[i];
        if (i < b.coeficientes.size())
            result += (unsigned long long)b.coeficientes[i];
        carry = result / BASE;
        coefs.push_back(result % BASE);
    }
    if (carry)
        coefs.push_back(carry);
    return inteiro(negativo, coefs);
}

inteiro inteiro::operator - (inteiro b) {
    if (negativo && b.negativo)
        return -((-*this) - (-b));
    if (negativo && !b.negativo)
        return -((-*this) + b);
    if (!negativo && b.negativo)
        return  *this + (-b);
    if (*this < b)
        return -(b - *this);

    vector<unsigned int> coefs;
    unsigned long long borrow = 0;
    unsigned int size = max(coeficientes.size(), b.coeficientes.size());
    for (unsigned int i = 0; i < size; i++) {
        long long result = -borrow;
        if (i < coeficientes.size())
            result += (unsigned long long)coeficientes[i];
        if (i < b.coeficientes.size())
            result -= (unsigned long long)b.coeficientes[i];
        borrow = 0;
        while (result < 0) {
            result += BASE;
            borrow += 1;
        }
        coefs.push_back(result);
    }
    assert(borrow == 0);
    return inteiro(false, coefs);
}

// Get an integer with digits:
//     coeficientes[start], ..., coeficientes[end-1]
inteiro inteiro::slice (int start, int end) {
    vector<unsigned int> coefs;
    if (start < 0)
        start = 0;
    if (end > (int)coeficientes.size())
        end = coeficientes.size();

    for (int i = start; i < end; i++)
        coefs.push_back(coeficientes[i]);
    return inteiro(negativo, coefs);
}

// Shift an integer up -- i.e. multiply by q^k;
inteiro inteiro::shift (int k) {
    vector<unsigned int> coefs;
    for (int i = 0; i < k; i++)
        coefs.push_back(0);
    for (int i = 0; i < coeficientes.size(); i++)
        coefs.push_back(coeficientes[i]);
    return inteiro(negativo, coefs);
}

inteiro inteiro::operator * (inteiro b) {
    if (negativo &&  b.negativo)
        return (-*this) * (-b);
    if (negativo && !b.negativo)
        return -((-*this) * b);
    if (!negativo && b.negativo)
        return -(*this * (-b));

    int size = max(coeficientes.size(), b.coeficientes.size());
    if (size < 5) {
        inteiro result;
        for (unsigned int i = 0; i < coeficientes.size(); i++) {
            vector<unsigned int> c;
            vector<unsigned int> d;
            for (unsigned int j = 0; j < b.coeficientes.size(); j++) {
                unsigned long long x =   coeficientes[i];
                unsigned long long y = b.coeficientes[j];
                unsigned long long r = x * y;
                c.push_back(r % BASE);
                d.push_back(r / BASE);
            }
            result = result + inteiro(false, c).shift(i);
            result = result + inteiro(false, d).shift(i+1);
        }

        return result;
    } else {
        unsigned int mid = (size+1)/2;

        inteiro a1 =   slice(mid, size);
        inteiro a2 =   slice(0,   mid);
        inteiro b1 = b.slice(mid, size);
        inteiro b2 = b.slice(0,   mid);

        inteiro u  = a1 * b1;
        inteiro v  = a2 * b2;
        inteiro w  = (a1+a2) * (b1+b2);

        return u.shift(2*mid) + (w - u - v).shift(mid) + v;
    }
}

pair<inteiro, inteiro> inteiro::divmod (inteiro b) {
    assert(*this >= 0);
    assert(b > 0);

    int ka =   coeficientes.size();
    int kb = b.coeficientes.size();

    // approximate b from above, so bcoef*BASE^kb >= b > (bcoef-1)*BASE^kb:
    unsigned long long bcoef = b.coeficientes[kb-1];
    if (b.slice(0, kb-2) != inteiro(0))
        bcoef++;

    inteiro q;
    inteiro r = *this;

    while (r >= b && ka > kb) {
        unsigned long long boundary = 0;
        boundary  = r.coeficientes[ka-1];
        boundary *= BASE;
        boundary += r.coeficientes[ka-2];

        unsigned long long step = boundary / bcoef;
        vector<unsigned int> cstep;
        cstep.push_back(step % BASE);
        cstep.push_back(step / BASE);
        inteiro istep = inteiro(false, cstep).shift(ka-kb-1);

        if (istep * b > r) {
            step = boundary / (b.coeficientes[kb-1]+1);
            vector<unsigned int> cstep;
            cstep.push_back(step % BASE);
            cstep.push_back(step / BASE);
            istep = inteiro(false, cstep).shift(ka-kb-1);
        }

        q = q + istep;
        r = r - istep * b;

        ka = r.coeficientes.size();
    }

    assert(r >= inteiro(0));

    if (r >= b && ka == kb) {
        // first estimate (quickly)
        unsigned int a = r.coeficientes[ka-1] / bcoef;
        inteiro ia = inteiro(a);
        q = q + ia;
        r = r - ia*b;
        // then find exact value (slowly)
        while (r >= b) {
            q = q + inteiro(1);
            r = r - b;
        }
    }
    
    assert(r < b);
    assert(r >= inteiro(0));

    return pair<inteiro, inteiro>(q, r);
}

inteiro inteiro::operator / (inteiro b) {
    if (b.negativo)
        return -*this / -b;

    if (negativo) {
        // This is floor division, so when a is negative,
        // and b doesn't divide a evenly, we must subtract
        // one from the result -- i.e. (a/b) = -((-a)/b) - 1.
        pair<inteiro, inteiro> p = (-*this).divmod(b);
        if (p.second == 0)
            return -p.first;
        else
            return -p.first - inteiro(1);
    } else {
        return divmod(b).first;
    }
}

inteiro inteiro::operator % (inteiro b) {
    // This is defined in order to satisfy the identity
    //   a = qb + r, when q= a / b and r = a % b.
    // The "special cases" come about because a/b is floor
    // division, which behaves slightly differently for
    // positive and negative numbers.
    if (negativo && b.negativo) {
        pair<inteiro, inteiro> p = (-*this).divmod(-b);
        return -p.second;
    }
    if (negativo && !b.negativo) {
        pair<inteiro, inteiro> p = (-*this).divmod(b);
        return p.second != inteiro(0) ? b - p.second : 0;
    }
    if (!negativo && b.negativo) {
        pair<inteiro, inteiro> p = divmod(-b);
        return p.second != inteiro(0) ? b + p.second : 0;
    }
    if (!negativo && !b.negativo) {
        pair<inteiro, inteiro> p = divmod(b);
        return p.second;
    }
}

string inteiro::ConvertToString( ) {
    string s = ConvertVectorToString(coeficientes);
    if (negativo)
        return "-" + s;
    else
        return s;
}

inteiro inteiro::ConvertToInteiro( string str ) {
    return inteiro(str);
}


#include <iostream>
#include "inteiro.h"
#include <cstdlib>
#include <ctime>

#define TEST(t)                                 \
    do{                                         \
        if (t)                                  \
            cout << "\t" << #t << endl;         \
        else                                    \
            cout << "  FAIL\t" << #t << endl;     \
    } while(0)


// Auxiliary functions to make tests more readable.
inteiro i(int a1) {
    bool negativo = a1 < 0;
    if (a1 < 0) a1 = -a1;
    vector<unsigned int> coef;
    coef.push_back(a1);
    return inteiro(negativo, coef);
}
inteiro i(int a1, unsigned int a2) {
    bool negativo = a1 < 0;
    if (a1 < 0) a1 = -a1;
    vector<unsigned int> coef;
    coef.push_back(a2);
    coef.push_back(a1);
    return inteiro(negativo, coef);
}
inteiro i(int a1, unsigned int a2, unsigned int a3) {
    bool negativo = a1 < 0;
    if (a1 < 0) a1 = -a1;
    vector<unsigned int> coef;
    coef.push_back(a3);
    coef.push_back(a2);
    coef.push_back(a1);
    return inteiro(negativo, coef);
}
inteiro i(int a1, unsigned int a2, unsigned int a3, unsigned int a4) {
    bool negativo = a1 < 0;
    if (a1 < 0) a1 = -a1;
    vector<unsigned int> coef;
    coef.push_back(a4);
    coef.push_back(a3);
    coef.push_back(a2);
    coef.push_back(a1);
    return inteiro(negativo, coef);
}

void test_constructors() {
    cout << endl;
    cout << "--------" << endl;
    cout << "Constructor Tests:" << endl;
    cout << "--------" << endl;

    cout << endl;
    cout << "  inteiro()" << endl;
    TEST(inteiro() == inteiro());
    TEST(inteiro() == inteiro(0));
    TEST(inteiro() == inteiro(false, vector<unsigned int>()));
    TEST(inteiro() == inteiro(true,  vector<unsigned int>()));

    cout << endl;
    cout << "  inteiro(int valor)" << endl;
    TEST(inteiro() != inteiro(1));
    TEST(inteiro() != inteiro(-1));
    TEST(inteiro(-1) != inteiro(1));

    cout << endl;
    cout << "  inteiro(bool negativo, vector<unsigned int> coefs)" << endl;

    TEST(inteiro(10) == i(10));
    TEST(inteiro(-10) != i(10));
    TEST(inteiro(10) != i(-10));
    TEST(inteiro(-10) == i(-10));
    TEST(i(10) != i(-10));

    vector<unsigned int> v0; v0.push_back(0);
    TEST(inteiro(true, v0) == inteiro(false, v0));

    TEST(i(10)       == i(0, 10));
    TEST(inteiro(10) == i(0, 10));
    TEST(i(10,0) != i(10));
    TEST(i(-10,0) != i(10, 0));

    cout << endl;
    cout << "   inteiro(string str)" << endl;

    TEST(inteiro() == inteiro(""));
    TEST(inteiro() == inteiro("0"));
    TEST(inteiro() == inteiro("-0000000000000000000000000000000000000"));
    TEST(inteiro(10) == inteiro("10"));
    TEST(inteiro(20) == inteiro("0000000000000000000000000020"));
    TEST(i(10, 20, 30) == inteiro("10000000020000000030"));
    TEST(inteiro(-39) == inteiro("-39"));
    TEST(i(-123,456) == inteiro("-123000000456"));
}

void test_comparison() {
    cout << endl;
    cout << "--------" << endl;
    cout << "Comparison Tests:" << endl;
    cout << "--------" << endl;

    cout << endl;
    cout << "    bool operator < (inteiro)" << endl;
    TEST(inteiro() < inteiro(1));
    TEST(inteiro(-1) < inteiro());
    TEST(!(inteiro() < inteiro()));
    TEST(!(inteiro(1) < inteiro()));
    TEST(i(10, 20) < i(11, 0));
    TEST(i(10, 20) < i(10, 21));
    TEST(!(i(10, 20) < i(9, 100000)));
    TEST(i(-10, 20) < i(-9, 100000));
    TEST(i(-10, 20) < i(10, 20));
    TEST(i(-10, 20) < i(-10, 19));

    cout << endl;
    cout << "    bool operator <= (inteiro)" << endl;
    TEST(inteiro() <= inteiro(1));
    TEST(inteiro(-1) <= inteiro());
    TEST(inteiro() <= inteiro());
    TEST(!(inteiro(1) <= inteiro()));
    TEST(i(10, 20) <= i(11, 0));
    TEST(i(10, 20) <= i(10, 21));
    TEST(!(i(10, 20) <= i(9, 100000)));
    TEST(i(-10, 20) <= i(-9, 100000));
    TEST(i(-10, 20) <= i(10, 20));
    TEST(i(-10, 20) <= i(-10, 19));

    cout << endl;
    cout << "    bool operator > (inteiro)" << endl;
    TEST(!(inteiro() > inteiro(1)));
    TEST(!(inteiro(-1) > inteiro()));
    TEST(!(inteiro() > inteiro()));
    TEST(inteiro(1) > inteiro());
    TEST(!(i(10, 20) > i(11, 0)));
    TEST(!(i(10, 20) > i(10, 21)));
    TEST(i(10, 20) > i(9, 100000));
    TEST(!(i(-10, 20) > i(-9, 100000)));
    TEST(!(i(-10, 20) > i(10, 20)));
    TEST(!(i(-10, 20) > i(-10, 19)));

    cout << endl;
    cout << "    bool operator >= (inteiro)" << endl;
    TEST(!(inteiro() >= inteiro(1)));
    TEST(!(inteiro(-1) >= inteiro()));
    TEST(inteiro() >= inteiro());
    TEST(inteiro(1) >= inteiro());
    TEST(!(i(10, 20) >= i(11, 0)));
    TEST(!(i(10, 20) >= i(10, 21)));
    TEST(i(10, 20) >= i(9, 100000));
    TEST(!(i(-10, 20) >= i(-9, 100000)));
    TEST(!(i(-10, 20) >= i(10, 20)));
    TEST(!(i(-10, 20) >= i(-10, 19)));
}

inteiro randint() {
    unsigned int size = rand() % 10;
    vector<unsigned int> coefs;
    bool negativo = rand() % 2;
    for (unsigned int i = 0; i < size; i++)
        coefs.push_back(rand()%1000000000);
    return inteiro(negativo, coefs);
}

inteiro randintnot0() {
    inteiro i;
    do {
        i = randint();
    } while(i == inteiro(0));
    return i;
}


void test_arithmetic() {
    cout << endl;
    cout << "--------" << endl;
    cout << "Arithmetic Tests:" << endl;
    cout << "--------" << endl;

    cout << endl;
    cout << "    inteiro operator + (inteiro)" << endl;
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(a + inteiro(0) == a);
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(inteiro(0) + a == a);
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(a + (-a) == inteiro(0));
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        inteiro b = randint();
        TEST(a + b == b + a);
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        inteiro b = randint();
        inteiro c = randint();
        TEST((a + b) + c == a + (b + c));
    }

    cout << endl;
    cout << "    inteiro operator - (inteiro)" << endl;
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(a - inteiro(0) == a);
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(inteiro(0) - a == -a);
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(a - a == inteiro(0));
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        inteiro b = randint();
        TEST(a - b == -(b - a));
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        inteiro b = randint();
        inteiro c = randint();
        TEST((a - b) - c == a - (b + c));

    }

    cout << endl;
    cout << "   inteiro operator * (inteiro)" << endl;
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(a * inteiro(0) == inteiro(0));
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(inteiro(0) * a == inteiro(0));
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(a * inteiro(1) == a);
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(inteiro(1) * a == a);
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(a * inteiro(-1) == -a);
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        inteiro b = randint();
        TEST(a * b == b * a);
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        inteiro b = randint();
        inteiro c = randint();
        TEST((a * b) * c == a * (b * c));
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        inteiro b = randint();
        inteiro c = randint();
        TEST((a + b) * c == (a * c) + (b * c));
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        inteiro b = randint();
        inteiro c = randint();
        TEST(a * (b + c) == (a * b) + (a * c));
    }

    cout << endl;
    cout << "   inteiro operator / (inteiro)" << endl;
    for (int i = 0; i < 5; i++) {
        inteiro a = randintnot0();
        TEST(inteiro(0) / a == inteiro(0));
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(a / inteiro(1) == a);
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(a / inteiro(-1) == -a);
    }
    for (int i = 0; i < 5; i++) {
        inteiro a, b;
        do {
            a = randint();
            b = randintnot0();
            if (a < inteiro(0)) a = -a;
            if (b < inteiro(0)) b = -b;
        } while(a >= b);
        TEST((a < b) && (a / b) == inteiro(0));
    }
    for (int i = 0; i < 10; i++) {
        inteiro a,b,c;
        do {
            a = randint();
            b = randintnot0();
            c = randintnot0();
        } while (a < inteiro(0) || b < inteiro(0) || c < inteiro(0));
        TEST((a / b) / c == a / (b * c));
    }
    for (int i = 0; i < 10; i++) {
        inteiro a,b,c;
        do {
            a = randint();
            b = randintnot0();
            c = randintnot0();
        } while (a < inteiro(0) || b < inteiro(0) || c < inteiro(0));
        TEST((a + b) / c >= (a / c) + (b / c));
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randintnot0();
        TEST(inteiro(0) % a == inteiro(0));
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(a % inteiro(1) == inteiro(0));
    }
    for (int i = 0; i < 5; i++) {
        inteiro a = randint();
        TEST(a % inteiro(-1) == inteiro(0));
    }
    for (int i = 0; i < 10; i++) {
        inteiro a,b, c = randint();
        do {
            a = randint();
            b = randintnot0();
        } while (a < inteiro(0) || b < inteiro(0) || a >= b);

        TEST((a < b) && ((a + b*c) % b == a));
    }
    for (int i = 0; i < 20; i++) {
        inteiro a = randint();
        inteiro b = randintnot0();
        inteiro q = a/b;
        inteiro r = a%b;
        TEST(a == q*b + r);
    }
}

int main(int argc, char** argv) {
    srand(time(NULL));
    test_constructors();
    test_comparison();
    test_arithmetic();
}
#include "inteiro.h"
#include <iostream>

using namespace std;

inteiro factorial(inteiro n) {
    inteiro t(1);
    for (inteiro i(1); i <= n; i = i + inteiro(1))
        t = t * i;   
    return t;
}

int main(int argc, char** argv) {
    cout << "100!  = "
         << factorial(inteiro(100)).ConvertToString() << endl;
    cout << "1000! = "
         << factorial(inteiro(1000)).ConvertToString() << endl;
    return 0;
}

#include "inteiro.h"
#include <iostream>

using namespace std;

inteiro divisor(inteiro n) {
    for (inteiro i(2); i*i <= n; i = i + inteiro(1)) {
        if (n % i == inteiro(0))
            return i;
    }
    return n;
}

int main(int argc, char** argv) {
    inteiro n("10000000001");
    cout << "Factors of " << n.ConvertToString() << ":" << endl;
    while (n > inteiro(1)) {
        inteiro d = divisor(n);
        cout << "    " << d.ConvertToString() << endl;
        n = n / d;
    }
    return 0;
}

